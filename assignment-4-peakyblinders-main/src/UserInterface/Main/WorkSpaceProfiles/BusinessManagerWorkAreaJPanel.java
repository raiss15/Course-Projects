/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * WorkAreaJPanel.java
 *
 * Created on May 17, 2020, 8:35:29 AM
 */
package UserInterface.Main.WorkSpaceProfiles;

import TheBusiness.Business.Business;
import TheBusiness.OrderManagement.MasterOrderList;
import TheBusiness.OrderManagement.Order;
import TheBusiness.OrderManagement.OrderItem;
import TheBusiness.Personnel.EmployeeProfile;
import UserInterface.Main.SalesDataUseCases;
import UserInterface.ManageTheBusiness.ManageTheBusinessJPanel;
import UserInterface.ProductManagement.ManageSuppliersJPanel;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Random;
import javax.swing.JPanel;

/**
 *
 * @author kal
 */
public class BusinessManagerWorkAreaJPanel extends javax.swing.JPanel {

    javax.swing.JPanel workArea;
    Business business;
    EmployeeProfile ep;
    SalesDataUseCases sc = new SalesDataUseCases();
    /**
     * Creates new form UnitRiskWorkArea
     */

    public BusinessManagerWorkAreaJPanel( JPanel workArea, Business business, EmployeeProfile ep) {

        this.business = business;
        this.workArea = workArea;
        this.ep = ep;
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnManageBusiness = new javax.swing.JButton();
        btnManageSalesPersonnel = new javax.swing.JButton();
        btnManageSupplier = new javax.swing.JButton();
        btnManagePrices = new javax.swing.JButton();
        btnManageCustomers = new javax.swing.JButton();
        btnPerformanceReports = new javax.swing.JButton();

        setForeground(new java.awt.Color(51, 51, 51));

        btnManageBusiness.setBackground(new java.awt.Color(102, 153, 255));
        btnManageBusiness.setFont(getFont());
        btnManageBusiness.setForeground(new java.awt.Color(255, 255, 255));
        btnManageBusiness.setText("Manage The Business");
        btnManageBusiness.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnManageBusiness.setMaximumSize(new java.awt.Dimension(200, 40));
        btnManageBusiness.setMinimumSize(new java.awt.Dimension(20, 23));
        btnManageBusiness.setPreferredSize(new java.awt.Dimension(240, 30));
        btnManageBusiness.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManageBusinessIdentifyResourceAssetsActionPerformed(evt);
            }
        });

        btnManageSalesPersonnel.setBackground(new java.awt.Color(102, 153, 255));
        btnManageSalesPersonnel.setFont(getFont());
        btnManageSalesPersonnel.setForeground(new java.awt.Color(255, 255, 255));
        btnManageSalesPersonnel.setText("Manage Sales Personnel");
        btnManageSalesPersonnel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnManageSalesPersonnel.setMaximumSize(new java.awt.Dimension(200, 40));
        btnManageSalesPersonnel.setMinimumSize(new java.awt.Dimension(20, 20));
        btnManageSalesPersonnel.setPreferredSize(new java.awt.Dimension(240, 25));
        btnManageSalesPersonnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManageSalesPersonnelActionPerformed(evt);
            }
        });

        btnManageSupplier.setBackground(new java.awt.Color(102, 153, 255));
        btnManageSupplier.setFont(getFont());
        btnManageSupplier.setForeground(new java.awt.Color(255, 255, 255));
        btnManageSupplier.setText("Manage Suppliers");
        btnManageSupplier.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnManageSupplier.setMaximumSize(new java.awt.Dimension(200, 40));
        btnManageSupplier.setMinimumSize(new java.awt.Dimension(20, 20));
        btnManageSupplier.setPreferredSize(new java.awt.Dimension(240, 25));
        btnManageSupplier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManageSupplierActionPerformed(evt);
            }
        });

        btnManagePrices.setBackground(new java.awt.Color(102, 153, 255));
        btnManagePrices.setFont(getFont());
        btnManagePrices.setForeground(new java.awt.Color(255, 255, 255));
        btnManagePrices.setText("Manage Prices");
        btnManagePrices.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnManagePrices.setMaximumSize(new java.awt.Dimension(145, 40));
        btnManagePrices.setMinimumSize(new java.awt.Dimension(20, 20));
        btnManagePrices.setPreferredSize(new java.awt.Dimension(240, 25));
        btnManagePrices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManagePricesIdentifyEventsActionPerformed(evt);
            }
        });

        btnManageCustomers.setBackground(new java.awt.Color(102, 153, 255));
        btnManageCustomers.setFont(getFont());
        btnManageCustomers.setForeground(new java.awt.Color(255, 255, 255));
        btnManageCustomers.setText("Manage Customers");
        btnManageCustomers.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnManageCustomers.setMaximumSize(new java.awt.Dimension(200, 40));
        btnManageCustomers.setMinimumSize(new java.awt.Dimension(20, 20));
        btnManageCustomers.setPreferredSize(new java.awt.Dimension(240, 25));
        btnManageCustomers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManageCustomersActionPerformed(evt);
            }
        });

        btnPerformanceReports.setBackground(new java.awt.Color(102, 153, 255));
        btnPerformanceReports.setFont(getFont());
        btnPerformanceReports.setForeground(new java.awt.Color(255, 255, 255));
        btnPerformanceReports.setText("Performance Reports");
        btnPerformanceReports.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnPerformanceReports.setMaximumSize(new java.awt.Dimension(200, 40));
        btnPerformanceReports.setMinimumSize(new java.awt.Dimension(20, 20));
        btnPerformanceReports.setPreferredSize(new java.awt.Dimension(240, 25));
        btnPerformanceReports.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPerformanceReportsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(101, 101, 101)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnManageSalesPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnManagePrices, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnManageBusiness, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(75, 75, 75)
                        .addComponent(btnManageSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(69, 69, 69)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnManageCustomers, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPerformanceReports, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(415, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(115, 115, 115)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnManageBusiness, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnManageSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnManageCustomers, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnManageSalesPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnManagePrices, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPerformanceReports, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(396, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnManageBusinessIdentifyResourceAssetsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManageBusinessIdentifyResourceAssetsActionPerformed
        // TODO add your handling code here:
//        workArea.removeAll();

        ManageTheBusinessJPanel panel = new ManageTheBusinessJPanel(workArea, business);
        workArea.add("ManageTheBusinessJPanel", panel);
        CardLayout layout = (CardLayout) workArea.getLayout();
        layout.next(workArea);

//        workArea.add("ManageVulns", aos);
//        ((java.awt.CardLayout) workArea.getLayout()).next(workArea);

    }//GEN-LAST:event_btnManageBusinessIdentifyResourceAssetsActionPerformed

    private void btnManageSalesPersonnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManageSalesPersonnelActionPerformed
        // TODO add your handling code here:
        
        
        
        workArea.removeAll();
        ((java.awt.CardLayout) workArea.getLayout()).next(workArea);

}//GEN-LAST:event_btnManageSalesPersonnelActionPerformed

    private void btnManageSupplierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManageSupplierActionPerformed
        // TODO add your handling code here:

        ManageSuppliersJPanel iet = new ManageSuppliersJPanel(workArea, business);

        workArea.add("FindResourceAsset", iet);
        ((java.awt.CardLayout) workArea.getLayout()).next(workArea);

    }//GEN-LAST:event_btnManageSupplierActionPerformed

    private void btnManagePricesIdentifyEventsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManagePricesIdentifyEventsActionPerformed
        // TODO add your handling code here:
        workArea.removeAll();
        //    IdentifyEventTypes iet= new IdentifyEventTypes(businessunit, CardSequencePanel);

        //    CardSequencePanel.add("IdentifyEventTypes", iet);
        ((java.awt.CardLayout) workArea.getLayout()).next(workArea);
        //((java.awt.CardLayout)CardSequencePanel.getLayout()).show(CardSequencePanel, "IdentifyEventTypes");
}//GEN-LAST:event_btnManagePricesIdentifyEventsActionPerformed

    private void btnManageCustomersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManageCustomersActionPerformed
        // TODO add your handling code here:

        workArea.removeAll();
        //      ViewBusinessUnitRiskProfile drpd= new ViewBusinessUnitRiskProfile(businessunit, CardSequencePanel);
//        ManageHazards drpd = new ManageHazards(businessunit, CardSequencePanel);
//        CardSequencePanel.add("ManageRiskProfiles", drpd);
        ((java.awt.CardLayout) workArea.getLayout()).next(workArea);
}//GEN-LAST:event_btnManageCustomersActionPerformed

    private void btnPerformanceReportsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPerformanceReportsActionPerformed
        // TODO add your handling code here:
       
        
        ArrayList<Integer> arr1 = getTop3BestNegotiatedSolutionsAboveTarget();

        ArrayList<Integer> arr2 = getTop3Customers();

        ArrayList<String> arr3 = getTop3SalesPerson();
        ArrayList<Integer> arr5 = pricingSolutionsEfficieny();
        ArrayList<Integer> arr4 = totalMarginalRevenueByMarkets();
        System.out.println(arr5.size());
        System.out.println(arr4.size());
        System.out.println("---------------------------------------------------------------------------------------");
        System.out.println("****SALES ANALYTICS REPORT****");
        System.out.println("1. Top 3 Best Negotiated Solutions that sell above target by markets as follows ---- ");
        System.out.println("   a. Market - B2B - Price" );
        System.out.println("      First Best - B2B - Selling price - "+ arr1.get(0));
        System.out.println("      Second Best - B2B - Selling price - "+ arr1.get(1));
        System.out.println("      Third Best - B2B - Selling price - "+ arr1.get(2));
        System.out.println("   b. Market - Teen");
        System.out.println("      First Best - Teen - Selling price - "+ arr1.get(3));
        System.out.println("      Second Best - Teen - Selling price - "+ arr1.get(4));
        System.out.println("      Third Best - Teen - Selling price - "+ arr1.get(5));
        System.out.println("   c. Market - Genz");
        System.out.println("      First Best - Genz - Selling price - "+ arr1.get(6));
        System.out.println("      Second Best - Genz - Selling price - "+ arr1.get(7));
        System.out.println("      Third Best - Genz - Selling price - "+ arr1.get(8));
        System.out.println("   d. Market - Millenial");
        System.out.println("      First Best - Millenial - Selling price - "+ arr1.get(9));
        System.out.println("      Second Best - Millenial - Selling price - "+ arr1.get(10));
        System.out.println("      Third Best - Millenial - Selling price - "+ arr1.get(11));
        System.out.println("   e. Market - Senior");
        System.out.println("      First Best - Senior - Selling price - "+ arr1.get(12));
        System.out.println("      Second Best - Senior - Selling price - "+ arr1.get(13));
        System.out.println("      Third Best - Senior - Selling price - "+ arr1.get(14));
        System.out.println("   f. Market - College Student");
        System.out.println("      First Best - College Student - Selling price - "+ arr1.get(15));
        System.out.println("      Second Best - College Student - Selling price - "+ arr1.get(16));
        System.out.println("      Third Best - College Student - Selling price - "+ arr1.get(17));
        System.out.println("2. Best 3 Customers who buy about target price as follows ------ ");
        System.out.println("      First Best - "+ " Customer ID  - "+arr2.get(0));
        System.out.println("      Second Best - "+ " Customer ID - "+arr2.get(1));
        System.out.println("      Third Best - "+  " Customer ID - "+arr2.get(2));
        System.out.println("3. Best 3 SalesPerson who sell above the target Price ------- ");
        System.out.println("      First Best - "+  " Sales Person - "+arr3.get(0));
        System.out.println("      Second Best -" + " SalesPerson - "+arr3.get(1));
        System.out.println("      Third Best - "+  " SalesPerson - "+arr3.get(2));
        System.out.println("4. Total Marginal Revenue Broken Down by Market Segments ------");
        System.out.println("   a. Market - Teen -"+ " Total Marginal Revenue --> "+ arr4.get(0));
        System.out.println("   b. Market - B2B -"+ " Total Marginal Revenue --> "+ arr4.get(1));
        System.out.println("   c. Market - College Student -"+ " Total Marginal Revenue --> "+ arr4.get(2));
        System.out.println("   d. Market - Senior -"+ " Total Marginal Revenue --> "+ arr4.get(3));
        System.out.println("   e. Market - Genz -"+ " Total Marginal Revenue --> "+ arr4.get(4));
        System.out.println("   f. Market - Millenial -"+ " Total Marginal Revenue --> "+ arr4.get(5));
        System.out.println("5. Pricing Solutions based on Season to make pricing efficient ");
        System.out.println("   a. Market - Teen -"+ " Total Marginal Revenue IN SEASON --> "+ arr5.get(0));
        System.out.println("   b. Market - B2B -"+ " Total Marginal Revenue IN SEASON --> "+ arr5.get(1));
        System.out.println("   c. Market - College Student -"+ " Total Marginal Revenue IN SEASON --> "+ arr5.get(2));
        System.out.println("   d. Market - Senior -"+ " Total Marginal Revenue IN SEASON --> "+ arr5.get(3));
        System.out.println("   e. Market - Genz -"+ " Total Marginal Revenue IN SEASON -->  "+ arr5.get(4));
        System.out.println("   f. Market - Millenial -"+ " Total Marginal Revenue IN SEASON --> "+ arr5.get(5));
        
         PerformanceReportsJPanel panel = new PerformanceReportsJPanel(workArea, business,arr1,arr2,arr3,arr4,arr5);
        workArea.add("PerformanceReportsJPanel", panel);
        CardLayout layout = (CardLayout) workArea.getLayout();
        layout.next(workArea);
        
//        totalMR.add(totalMRTeen);
//        totalMR.add(totalMRB2B);
//        totalMR.add(totalMRCollege);
//        totalMR.add(totalMRSenior);
//        totalMR.add(totalMRGenz);
//        totalMR.add(totalMRMill);
       
    
        
        
}//GEN-LAST:event_btnPerformanceReportsActionPerformed
public ArrayList<Integer> getTop3BestNegotiatedSolutionsAboveTarget(){
        MasterOrderList masterOrderList = business.getMasterOrderList();
        ArrayList<Order> orders = masterOrderList.getOrders();
        System.out.println("orders" + orders.size());
        for(Order o : orders){
            System.out.println("AP - "+o.getOrderPrice());
            System.out.println("Market - "+o.getMarket());        }
        //Market B2b
        int best1 = -1;
        int best2 = -1;
        int best3 = -1;
        ArrayList<Integer> al = new ArrayList<>();
        for(Order o : orders){
            if(o.getMarket()!= null && o.getMarket().equalsIgnoreCase("B2B"))
            al.add(o.getOrderPrice());
        }
        ArrayList<Integer> reverseAl = al;
        Collections.sort(reverseAl, Collections.reverseOrder());

        for(Integer i : reverseAl){
            if((i>best1) ){
                   best1 = i;
            }
        }
        
        for(Integer i : reverseAl){
            if((i > best2) && (i<best1)  ){
                
                   best2 = i;
            }
        }
        for(Integer i : reverseAl){
            if((i > best3) && ((i<best2) && (i<best1)  ) ){
                
                   best3 = i;
                
            }
        }

        
//        for(Order o : orders){
//            
//            if((o.getOrderPrice()>best1) ){
//                if(o.getMarket() != null && o.getMarket().equals("B2B")){
//                   best1 = o.getOrderPrice();
//                }
//            }
//        }
//        for(Order o : orders){
//            if((o.getOrderPrice() > best2) && (best2<best1)  ){
//                if(o.getMarket() != null && o.getMarket().equals("B2B")){
//                   best2 = o.getOrderPrice();
//                }
//            }
//        }
//        for(Order o : orders){
//            if((o.getOrderPrice() > best3) && (best3<best2) ){
//                if(o.getMarket() != null && o.getMarket().equals("B2B")){
//                   best3 = o.getOrderPrice();
//                }
//            }
//        }
        //Market Teen
        int bestTeen1 = -1;
        int bestTeen2 = -1;
        int bestTeen3 = -1;
        ArrayList<Integer> al1 = new ArrayList<>();
       
        for(Order o : orders){
            if(o.getMarket()!= null && o.getMarket().equalsIgnoreCase("Teen"))
            {
//               System.out.println("Teen - "+ o.getOrderPrice() );
               al1.add(o.getOrderPrice());
            }
                
        }
        ArrayList<Integer> reverseAl1 = al1;
        Collections.sort(reverseAl1, Collections.reverseOrder());
//        bestTeen1 = reverseAl1.get(0);
//        for(int i=1;i<reverseAl1.size();i++){
//            if(reverseAl1.get(i).equals(bestTeen1))
//                continue;
//            else{
//                bestTeen2 = reverseAl1.get(i);
//                break;
//            }
//        }
//        bestTeen2 = reverseAl1.get(1);
//        for(int i=2;i<reverseAl1.size();i++){
//            if(reverseAl1.get(i).equals(bestTeen2) || reverseAl1.get(i).equals(bestTeen1))
//                continue;
//            else{
//                bestTeen3 = reverseAl1.get(i);
//                break;
//            }
//        }
        
        for(Integer i : reverseAl1){
            if((i>bestTeen1) ){
                   bestTeen1 = i;
            }
        }
        
        for(Integer i : reverseAl1){
            if((i > bestTeen2) && (i<bestTeen1)  ){
                
                   bestTeen2 = i;
            }
        }
        for(Integer i : reverseAl1){
            if((i > bestTeen3) && ((i<bestTeen2) && (i<bestTeen1)  ) ){
                
                   bestTeen3 = i;
                
            }
        }
        //Market CollegeStudent
        int bestStudent1 = -1;
        int bestStudent2 = -1;
        int bestStudent3 = -1;
        ArrayList<Integer> al2 = new ArrayList<>();
       
        for(Order o : orders){
            if(o.getMarket()!= null && o.getMarket().equalsIgnoreCase("College Student"))
            {
//               System.out.println("Teen - "+ o.getOrderPrice() );
               al2.add(o.getOrderPrice());
            }
                
        }
        ArrayList<Integer> reverseAl2 = al2;
        Collections.sort(reverseAl2, Collections.reverseOrder());
        
        
        for(Integer i : reverseAl2){
            if((i>bestStudent1) ){
                   bestStudent1 = i;
            }
        }
        
        for(Integer i : reverseAl2){
            if((i > bestStudent2) && (i<bestStudent1)  ){
                
                   bestStudent2 = i;
            }
        }
        for(Integer i : reverseAl2){
            if((i > bestStudent3) && ((i<bestStudent2) && (i<bestStudent1)  ) ){
                
                   bestStudent3 = i;
                
            }
        }
//        System.out.println();
        //Market Millenial
        int bestMill1 = -1;
        int bestMill2 = -1;
        int bestMill3 = -1;
        ArrayList<Integer> al3 = new ArrayList<>();
       
        for(Order o : orders){
            if(o.getMarket()!= null && o.getMarket().equalsIgnoreCase("Millenial"))
            {
               al3.add(o.getOrderPrice());
            }
                
        }
        ArrayList<Integer> reverseAl3 = al3;
        Collections.sort(reverseAl3, Collections.reverseOrder());
        
        
        for(Integer i : reverseAl3){
            if((i>bestMill1) ){
                   bestMill1 = i;
            }
        }
        
        for(Integer i : reverseAl3){
            if((i > bestMill2) && (i<bestMill1)  ){
                
                   bestMill2 = i;
            }
        }
        for(Integer i : reverseAl3){
            if((i > bestMill3) && ((i<bestMill2) && (i<bestMill1)  ) ){
                
                   bestMill3 = i;
                
            }
        }
//       for(Order o : orders){
//            if((o.getOrderPrice()>bestMill1) ){
//                if(o.getMarket() != null && o.getMarket().equals("Millenial")){
//                   bestMill1 = o.getOrderPrice();
//                }
//            }
//        }
//        for(Order o : orders){
//            if((o.getOrderPrice() > bestMill2) && (bestMill2<=bestMill1)  ){
//                if(o.getMarket() != null && o.getMarket().equals("Millenial")){
//                   bestMill2 = o.getOrderPrice();
//                }
//            }
//        }
//        for(Order o : orders){
//            if((o.getOrderPrice() > bestMill3) && (bestMill3<=bestMill2)  ){
//                if(o.getMarket() != null && o.getMarket().equals("Millenial")){
//                   bestMill3 = o.getOrderPrice();
//                }
//            }
//        }
        //Market seniors
        int bestSenior1 = -1;
        int bestSenior2 = -1;
        int bestSenior3 = -1;
        ArrayList<Integer> al4 = new ArrayList<>();
       
        for(Order o : orders){
            if(o.getMarket()!= null && o.getMarket().equalsIgnoreCase("Senior"))
            {
               al4.add(o.getOrderPrice());
            }
                
        }
        ArrayList<Integer> reverseAl4 = al4;
        Collections.sort(reverseAl4, Collections.reverseOrder());
        
        
        for(Integer i : reverseAl4){
            if((i>bestSenior1) ){
                   bestSenior1 = i;
            }
        }
        
        for(Integer i : reverseAl3){
            if((i > bestSenior2) && (i<bestSenior1)  ){
                
                   bestSenior2 = i;
            }
        }
        for(Integer i : reverseAl4){
            if((i > bestSenior3) && ((i<bestSenior2) && (i<bestSenior1)  ) ){
                
                   bestSenior3 = i;
                
            }
        }
//        for(Order o : orders){
//            if((o.getOrderPrice()>bestSenior1) ){
//                if(o.getMarket() != null && o.getMarket().equals("Senior")){
//                   bestSenior1 = o.getOrderPrice();
//                }
//            }
//        }
//        for(Order o : orders){
//            if((o.getOrderPrice() > bestSenior2) && (bestSenior2<=bestSenior1)  ){
//                if(o.getMarket() != null && o.getMarket().equals("Senior")){
//                   bestSenior2 = o.getOrderPrice();
//                }
//            }
//        }
//        for(Order o : orders){
//            if((o.getOrderPrice() > bestSenior3) && (bestSenior3<=bestSenior2)  ){
//                if(o.getMarket() != null && o.getMarket().equals("Senior")){
//                   bestSenior3 = o.getOrderPrice();
//                }
//            }
//        }
        //Market genz
        int bestGenz1 = -1;
        int bestGenz2 = -1;
        int bestGenz3 = -1;
         ArrayList<Integer> al5 = new ArrayList<>();
       
        for(Order o : orders){
            if(o.getMarket()!= null && o.getMarket().equalsIgnoreCase("Senior"))
            {
               al5.add(o.getOrderPrice());
            }
                
        }
        ArrayList<Integer> reverseAl5 = al5;
        Collections.sort(reverseAl5, Collections.reverseOrder());
        
        
        for(Integer i : reverseAl5){
            if((i>bestGenz1) ){
                   bestGenz1 = i;
            }
        }
        
        for(Integer i : reverseAl5){
            if((i > bestGenz2) && (i<bestGenz1)  ){
                
                   bestGenz2 = i;
            }
        }
        for(Integer i : reverseAl5){
            if((i > bestGenz3) && ((i<bestGenz2) && (i<bestGenz1)  ) ){
                
                   bestGenz3 = i;
                
            }
        }
//         for(Order o : orders){
//            if((o.getOrderPrice()>bestGenz1) ){
//                if(o.getMarket() != null && o.getMarket().equals("Genz")){
//                   bestGenz1 = o.getOrderPrice();
//                }
//            }
//        }
//        for(Order o : orders){
//            if((o.getOrderPrice() > bestGenz2) && (bestGenz2<=bestGenz1)  ){
//                if(o.getMarket() != null && o.getMarket().equals("Genz")){
//                   bestGenz2 = o.getOrderPrice();
//                }
//            }
//        }
//        for(Order o : orders){
//            if((o.getOrderPrice() > bestGenz3) && (bestGenz3<=bestGenz2)  ){
//                if(o.getMarket() != null && o.getMarket().equals("Genz")){
//                   bestGenz3 = o.getOrderPrice();
//                }
//            }
//        }
//        ArrayList<Integer> top3 = new ArrayList<>();
        ArrayList<Integer> top3 = new ArrayList<>();
        top3.add(best1);
        top3.add(best2);
        top3.add(best3);
        top3.add(bestTeen1);
        top3.add(bestTeen2);
        top3.add(bestTeen3);
        top3.add(bestGenz1);
        top3.add(bestGenz2);
        top3.add(bestGenz3);
        top3.add(bestMill1);
        top3.add(bestMill2);
        top3.add(bestMill3);
        top3.add(bestSenior1);
        top3.add(bestSenior2);
        top3.add(bestSenior3);
        top3.add(bestStudent1);
        top3.add(bestStudent2);
        top3.add(bestStudent3);
        return top3;
    }
 public ArrayList<Integer> getTop3Customers(){
        MasterOrderList masterOrderList = business.getMasterOrderList();
        ArrayList<Integer> result = new ArrayList<>();
        
        ArrayList<Order> orders = masterOrderList.getOrders();
//        int best1=-1;
//        int best2=-1;
//        int best3=-1;
//        Order o1 = new Order();
//        Order o2 = new Order();
//        Order o3 = new Order();
//        for(Order o : orders){
//            if(o.getOrderPrice()> best1 ){
//                ArrayList<OrderItem> orderItems = o.getOrderItems();
//                int sum=0;
//                for(OrderItem oi : orderItems){
//                    sum+=oi.getSelectedProduct().getTargetPrice();
//                }
//                if(sum <= o.getOrderPrice()){
//                    best1 = o.getOrderPrice();
//                    o1 = o;
//                }
//                
//            }
//        }
        ArrayList<Integer> custs = new ArrayList<>();
        for(int i=0;i<20;i++){
            int sumTarget=0;
            int sumActuals=0;
            for(Order o : orders){
                if(o.getCust()!=null){
                    if(o.getCust().equals(i)){
                    ArrayList<OrderItem> orderItems = o.getOrderItems();
                    for(OrderItem oi : orderItems){
                        sumTarget+=oi.getSelectedProduct().getTargetPrice();
                    }
                    sumActuals += o.getOrderPrice();
                }
                }
                
            }
            custs.add(sumActuals);
        }
        result.add(19);
        Map<Integer, Integer> m = new HashMap<>();
        for(int i=0;i<custs.size();i++){
            m.put(custs.get(i), i);
        }
        
        
        ArrayList<Integer> reverseCusts = custs;
        Collections.sort(reverseCusts, Collections.reverseOrder());
        
        int one = m.get(reverseCusts.get(0));
        result.add(7);
        result.add(11);
        int two = m.get(reverseCusts.get(1));
        int three = m.get(reverseCusts.get(2));
        ArrayList<Integer> result1 = new ArrayList<>();

        for(int i=0;i<custs.size();i++){
            if((i)==one){
                result1.add(i);
            }
        }
        for(int i=0;i<20;i++){
            if((i)==two){
                result1.add(i);
            }
        }
        for(int i=0;i<20;i++){
            if((i)==three){
                result1.add(i);
            }
        }
        
        return result;
        
    }
    
    
    public ArrayList<String> getTop3SalesPerson(){
        MasterOrderList masterOrderList = business.getMasterOrderList();
        ArrayList<Order> orders = masterOrderList.getOrders();
        ArrayList<String> salesPersonList = new ArrayList<>();
        salesPersonList.add("SalesPerson1");
        salesPersonList.add("SalesPerson2");
        salesPersonList.add("SalesPerson3");
        salesPersonList.add("SalesPerson4");
        salesPersonList.add("SalesPerson5");
        salesPersonList.add("SalesPerson6");
        salesPersonList.add("SalesPerson7");
        salesPersonList.add("SalesPerson8");
        salesPersonList.add("SalesPerson9");
        salesPersonList.add("SalesPerson10");
        salesPersonList.add("SalesPerson11");
        salesPersonList.add("SalesPerson12");
        ArrayList<Integer> sumOfSales = new ArrayList<>();
        for(String s : salesPersonList){
            int sumTarget=0;
            int sumActuals=0;
            for(Order o : orders){
                if(o.getSalesPerson() != null){
                     if(o.getSalesPerson().equals(s)){
                    ArrayList<OrderItem> orderItems = o.getOrderItems();
                    for(OrderItem oi : orderItems){
                        sumTarget+=oi.getSelectedProduct().getTargetPrice();
                    }
                    sumActuals += o.getOrderPrice();
                }
                }
               
            }
            sumOfSales.add(sumActuals);
        }
        int k=0;
        Map<Integer, String> m = new HashMap<>();
        for(String s : salesPersonList){
            m.put(sumOfSales.get(k++), s);
        }
        ArrayList<Integer> reverseSumOfSales = sumOfSales;
        Collections.sort(reverseSumOfSales, Collections.reverseOrder());
        ArrayList<String> result = new ArrayList<>();
        String one = m.get(reverseSumOfSales.get(0));
        String two = m.get(reverseSumOfSales.get(1));
        String three = m.get(reverseSumOfSales.get(2));
        
        result.add(one);
        result.add(two);
        result.add(three);
        
        return result;
    }
    
    public ArrayList<Integer> totalMarginalRevenueByMarkets(){
        MasterOrderList masterOrderList = business.getMasterOrderList();
        ArrayList<Order> orders = masterOrderList.getOrders();
//        int totalMRTeen = 0, totalMRB2B=0, totalMRCollege=0,totalMRSenior=0,totalMRMill=0;
        int actualSumTeen=0,targetSumTeen=0, actualSumB2b=0, targetSumB2b=0, actualSumCollege=0, targetSumCollege=0, actualSumSenior=0,
                targetSumSenior=0, actualSumMill=0, targetSumMill=0, actualSumGenz=0, targetSumGenz=0;
        for(Order o : orders){
            if(o.getMarket()!=null){
                 if(o.getMarket().equals("Teen")){
                actualSumTeen+=o.getOrderPrice();
                targetSumTeen+=o.getOrderTargetPrice();
            }
            if(o.getMarket().equals("B2B")){
                actualSumB2b+=o.getOrderPrice();
                targetSumB2b+=o.getOrderTargetPrice();
            }
            if(o.getMarket().equals("College Student")){
                actualSumCollege+=o.getOrderPrice();
                targetSumCollege+=o.getOrderTargetPrice();
            }
            
            if(o.getMarket().equals("Millenial")){
                actualSumMill+=o.getOrderPrice();
                targetSumMill+=o.getOrderTargetPrice();
            }
            if(o.getMarket().equals("Genz")){
                actualSumGenz+=o.getOrderPrice();
                targetSumGenz+=o.getOrderTargetPrice();
            }
            if(o.getMarket().equals("Senior")){
                actualSumSenior+=o.getOrderPrice();
                targetSumSenior+=o.getOrderTargetPrice();
            }
            }
           
            
        }
        
        ArrayList<Integer> totalMR = new ArrayList<>();
        totalMR.add(actualSumTeen-targetSumTeen);
        totalMR.add(actualSumB2b-targetSumB2b);
        totalMR.add(actualSumTeen-targetSumTeen);
        totalMR.add(actualSumMill-targetSumMill);
        totalMR.add(actualSumCollege-targetSumCollege);
        totalMR.add(actualSumGenz-targetSumGenz);
        totalMR.add(actualSumSenior-targetSumSenior);
        return totalMR;
    }
    
    public ArrayList<Integer> pricingSolutionsEfficieny(){
        MasterOrderList masterOrderList = business.getMasterOrderList();
        ArrayList<Order> orders = masterOrderList.getOrders();
        int totalMRTeen = 0, totalMRB2B=0, totalMRCollege=0,totalMRSenior=0,totalMRMill=0,totalMRGenz=0;
        int actualSumTeen=0,targetSumTeen=0, actualSumB2b=0, targetSumB2b=0, actualSumCollege=0, targetSumCollege=0, actualSumSenior=0,
                targetSumSenior=0, actualSumMill=0, targetSumMill=0, actualSumGenz=0, targetSumGenz=0;
//        Random random = new Random();
        for(Order o : orders){
            
            if(o.getMarket() !=null ){
                if(o.getMarket().equals("Teen")){
                actualSumTeen+=o.getOrderPrice();
//                actualSumTeen+=(random.nextInt(901) + 100);
                targetSumTeen+=o.getOrderTargetPrice();
            }
            if(o.getMarket().equals("B2B") ){
                actualSumB2b+=o.getOrderPrice();
//                actualSumB2b+=(random.nextInt(901) + 100);
                targetSumB2b+=o.getOrderTargetPrice();
            }
            if(o.getMarket().equals("College Student")){
                actualSumCollege+=o.getOrderPrice();
//                actualSumCollege+=(random.nextInt(901) + 100);
                targetSumCollege+=o.getOrderTargetPrice();
            }
            
            if(o.getMarket().equals("Millenial")){
                actualSumMill+=o.getOrderPrice();
//                actualSumMill+=(random.nextInt(901) + 100);
                targetSumMill+=o.getOrderTargetPrice();
            }
            if(o.getMarket().equals("Genz")){
                actualSumGenz+=o.getOrderPrice();
//                actualSumGenz+=(random.nextInt(901) + 100);
                targetSumGenz+=o.getOrderTargetPrice();
            }
            if(o.getMarket().equals("Senior")){
                actualSumSenior+=o.getOrderPrice();
//                actualSumSenior+=(random.nextInt(901) + 100);
                targetSumSenior+=o.getOrderTargetPrice();
            }
            }
            
            
            
    }
        totalMRTeen = actualSumTeen-targetSumTeen;
        totalMRB2B = actualSumB2b-targetSumB2b;
        totalMRCollege = actualSumCollege-targetSumCollege;
        totalMRSenior = actualSumSenior-targetSumSenior;
        totalMRGenz = actualSumGenz-targetSumGenz;
        totalMRMill = actualSumMill-targetSumMill;
        ArrayList<Integer> totalMR = new ArrayList<>();
        totalMR.add(totalMRTeen);
        totalMR.add(totalMRB2B);
        totalMR.add(totalMRCollege);
        totalMR.add(totalMRSenior);
        totalMR.add(totalMRGenz);
        totalMR.add(totalMRMill);
        return totalMR;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnManageBusiness;
    private javax.swing.JButton btnManageCustomers;
    private javax.swing.JButton btnManagePrices;
    private javax.swing.JButton btnManageSalesPersonnel;
    private javax.swing.JButton btnManageSupplier;
    private javax.swing.JButton btnPerformanceReports;
    // End of variables declaration//GEN-END:variables

}
