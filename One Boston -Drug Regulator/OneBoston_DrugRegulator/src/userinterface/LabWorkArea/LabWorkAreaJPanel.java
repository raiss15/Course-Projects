/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.LabWorkArea;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.LabOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sanatpopli
 */
public class LabWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel workArea;
    private EcoSystem biz;
    private UserAccount ua;
    private LabOrganization labOrg;
    private Network network;
    private Enterprise ep;

    /**
     * Creates new form LabAssistantWorkAreaJPanel
     */
    public LabWorkAreaJPanel(JPanel workArea, UserAccount userAccount, Organization org, Enterprise enterprise, EcoSystem business, Network network) {
        initComponents();

        this.workArea = workArea;
        this.ua = userAccount;
        this.biz = business;
        this.labOrg = (LabOrganization) org;
        this.ep = enterprise;
        this.network = network;
        populateTable();
    }

    public void populateTable() {
        DefaultTableModel dtm = (DefaultTableModel) tblWorkArea.getModel();

        dtm.setRowCount(0);
        ArrayList<WorkRequest> workRequestList = labOrg.getWorkQueue().getWorkRequestList();
        for (WorkRequest request : workRequestList) {
            
            Object[] row = new Object[7];
            row[0] = ((LabTestWorkRequest) request);
            row[1] = request.getMessage();
            row[2] = request.getSender().getEmployee().getName();
            row[3] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
            row[4] = request.getStatus();
            row[5] = ((LabTestWorkRequest) request).getPatient().getDrugNewCompound();
            dtm.addRow(row);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane = new javax.swing.JScrollPane();
        tblWorkArea = new javax.swing.JTable();
        btnAssign = new javax.swing.JButton();
        btnProcess = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        lblLab = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 204, 204));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblWorkArea.setBackground(new java.awt.Color(255, 255, 153));
        tblWorkArea.setFont(new java.awt.Font("Microsoft JhengHei Light", 0, 20)); // NOI18N
        tblWorkArea.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Name", "Message", "Sender", "Receiver", "Status", "Drug"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblWorkArea.setRowHeight(30);
        jScrollPane.setViewportView(tblWorkArea);

        add(jScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, 1130, 300));

        btnAssign.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        btnAssign.setText("Assign to me");
        btnAssign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignActionPerformed(evt);
            }
        });
        add(btnAssign, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 450, -1, -1));

        btnProcess.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        btnProcess.setText("Process");
        btnProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessActionPerformed(evt);
            }
        });
        add(btnProcess, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 450, -1, -1));

        btnRefresh.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        add(btnRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 450, -1, -1));

        lblLab.setFont(new java.awt.Font("SansSerif", 1, 48)); // NOI18N
        lblLab.setText("Lab Work space");
        add(lblLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 40, 400, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnAssignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignActionPerformed

        int selectedRow = tblWorkArea.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        }
        //to check task is  already completed
        if (tblWorkArea.getValueAt(selectedRow, 4) != null) {
            if (((tblWorkArea.getValueAt(selectedRow, 4).equals("Completed")))) {

                JOptionPane.showMessageDialog(null, "Request is already completed");
                return;
            }
        }

        //to check task is already assigned        
        if (tblWorkArea.getValueAt(selectedRow, 4) != null) {
            if (tblWorkArea.getValueAt(selectedRow, 3) != null) {
                if (ua.getUsername().equalsIgnoreCase(tblWorkArea.getValueAt(selectedRow, 3).toString())) {

                    if (tblWorkArea.getValueAt(selectedRow, 4).equals("Pending")) {
                        JOptionPane.showMessageDialog(null, "Request is already assigned");
                        return;
                    }
                }
            }
        }
        //to check the task is assigned to some one else 
        if (tblWorkArea.getValueAt(selectedRow, 4) != null) {
            if (tblWorkArea.getValueAt(selectedRow, 3) != null) {
                if (tblWorkArea.getValueAt(selectedRow, 4).equals("Processing")) {
                    JOptionPane.showMessageDialog(null, "Request is already assigned");
                    return;
                }
            }
        }

        //to check whether task is already assigined 
        if (tblWorkArea.getValueAt(selectedRow, 3) != null) {
            if (!ua.getUsername().equalsIgnoreCase(tblWorkArea.getValueAt(selectedRow, 3).toString())) {
                JOptionPane.showMessageDialog(null, "Request is already assigned");
                return;
            }
        }
        int flag = 0;

        for (WorkRequest request : labOrg.getWorkQueue().getWorkRequestList()) {

            if (request.getStatus() == null) {
                continue;
            }
            if (request.getStatus().equals("Pending")) {

                if (request.getReceiver() != null) {

                    if (ua.getUsername().equalsIgnoreCase(request.getReceiver().toString())) {
                        flag = 1;
                    }
                }
            }
        }
        if (flag == 1) {
            JOptionPane.showMessageDialog(null, "Please complete the existing request before taking a new request");
            return;

        }
        int flag1 = 0;
        for (WorkRequest request : labOrg.getWorkQueue().getWorkRequestList()) {

            if (request.getStatus() == null) {
                continue;
            }
            if (tblWorkArea.getValueAt(selectedRow, 3) != null) {
                if (request.getStatus().equals("Processing") && ua.getUsername().equalsIgnoreCase(tblWorkArea.getValueAt(selectedRow, 3).toString())) {
                    flag1 = 1;
                }
            }
        }
        if (flag1 == 1) {
            JOptionPane.showMessageDialog(null, "Please complete the existing request before taking a new request");
            return;

        }

        WorkRequest request = (WorkRequest) tblWorkArea.getValueAt(selectedRow, 0);
        request.setReceiver(ua);
        request.setStatus("Pending");
        populateTable();

    }//GEN-LAST:event_btnAssignActionPerformed

    private void btnProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessActionPerformed

        int selectedRow = tblWorkArea.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        }
        //to check whether the task is completed 
        LabTestWorkRequest request = (LabTestWorkRequest) tblWorkArea.getValueAt(selectedRow, 0);
        if (tblWorkArea.getValueAt(selectedRow, 4) != null) {
            if (((tblWorkArea.getValueAt(selectedRow, 4).equals("Completed")))) {

                JOptionPane.showMessageDialog(null, "Request is already completed");
                return;
            }
        }
        //to check whether task is assigned forr process
        if (tblWorkArea.getValueAt(selectedRow, 3) != null) {
            if (tblWorkArea.getValueAt(selectedRow, 4) == null || !ua.getUsername().equalsIgnoreCase(tblWorkArea.getValueAt(selectedRow, 3).toString())) {
                JOptionPane.showMessageDialog(null, "Request is not assigned to you for process");
                return;
            }
        }
        int flag = 0;
        if (tblWorkArea.getValueAt(selectedRow, 3) != null) {
            if (tblWorkArea.getValueAt(selectedRow, 4).equals("Processing")) {

                flag = 1;
            }
        }
        if (flag != 1) {
            if (tblWorkArea.getValueAt(selectedRow, 4) != null) {

                if ((!(tblWorkArea.getValueAt(selectedRow, 4).equals("Pending")))) {
                    JOptionPane.showMessageDialog(null, "Request is not assigned to you for process");
                    return;
                }
            }
        }

        request.setStatus("Processing");

        LabRequestWorkAreaJPanel panel = new LabRequestWorkAreaJPanel(workArea, request, labOrg, ua, network);
        workArea.add("LabRequestWorkAreaJPanel", panel);
        CardLayout layout = (CardLayout) workArea.getLayout();
        layout.next(workArea);

    }//GEN-LAST:event_btnProcessActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        populateTable();
    }//GEN-LAST:event_btnRefreshActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssign;
    private javax.swing.JButton btnProcess;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JLabel lblLab;
    private javax.swing.JTable tblWorkArea;
    // End of variables declaration//GEN-END:variables
}
